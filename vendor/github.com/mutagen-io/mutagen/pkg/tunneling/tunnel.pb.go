// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tunneling/tunnel.proto

package tunneling

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// TunnelHostCredentials is the format for the tunnel host credentials file.
type TunnelHostCredentials struct {
	// Identifier is the (unique) tunnel identifier. It is static. It cannot be
	// empty.
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Version is the tunnel version. It is static.
	Version Version `protobuf:"varint,2,opt,name=version,proto3,enum=tunneling.Version" json:"version,omitempty"`
	// CreationTime is the creation time of the tunnel. It is static. It cannot
	// be nil.
	CreationTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=creationTime,proto3" json:"creationTime,omitempty"`
	// CreatingVersionMajor is the major version component of the version of
	// Mutagen which created the tunnel. It is static.
	CreatingVersionMajor uint32 `protobuf:"varint,4,opt,name=creatingVersionMajor,proto3" json:"creatingVersionMajor,omitempty"`
	// CreatingVersionMinor is the minor version component of the version of
	// Mutagen which created the tunnel. It is static.
	CreatingVersionMinor uint32 `protobuf:"varint,5,opt,name=creatingVersionMinor,proto3" json:"creatingVersionMinor,omitempty"`
	// CreatingVersionPatch is the patch version component of the version of
	// Mutagen which created the tunnel. It is static.
	CreatingVersionPatch uint32 `protobuf:"varint,6,opt,name=creatingVersionPatch,proto3" json:"creatingVersionPatch,omitempty"`
	// Token is the API access token for the tunnel endpoint. It is static.
	Token string `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	// Secret is the HMAC secret key used for signing and validating offers. It
	// is static.
	Secret []byte `protobuf:"bytes,8,opt,name=secret,proto3" json:"secret,omitempty"`
	// Configuration is the flattened tunnel configuration. It must not be nil.
	// It is static.
	Configuration        *Configuration `protobuf:"bytes,9,opt,name=configuration,proto3" json:"configuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TunnelHostCredentials) Reset()         { *m = TunnelHostCredentials{} }
func (m *TunnelHostCredentials) String() string { return proto.CompactTextString(m) }
func (*TunnelHostCredentials) ProtoMessage()    {}
func (*TunnelHostCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf69b8cf0fa91a3, []int{0}
}

func (m *TunnelHostCredentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelHostCredentials.Unmarshal(m, b)
}
func (m *TunnelHostCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelHostCredentials.Marshal(b, m, deterministic)
}
func (m *TunnelHostCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelHostCredentials.Merge(m, src)
}
func (m *TunnelHostCredentials) XXX_Size() int {
	return xxx_messageInfo_TunnelHostCredentials.Size(m)
}
func (m *TunnelHostCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelHostCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelHostCredentials proto.InternalMessageInfo

func (m *TunnelHostCredentials) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *TunnelHostCredentials) GetVersion() Version {
	if m != nil {
		return m.Version
	}
	return Version_Invalid
}

func (m *TunnelHostCredentials) GetCreationTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *TunnelHostCredentials) GetCreatingVersionMajor() uint32 {
	if m != nil {
		return m.CreatingVersionMajor
	}
	return 0
}

func (m *TunnelHostCredentials) GetCreatingVersionMinor() uint32 {
	if m != nil {
		return m.CreatingVersionMinor
	}
	return 0
}

func (m *TunnelHostCredentials) GetCreatingVersionPatch() uint32 {
	if m != nil {
		return m.CreatingVersionPatch
	}
	return 0
}

func (m *TunnelHostCredentials) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TunnelHostCredentials) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *TunnelHostCredentials) GetConfiguration() *Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

// Tunnel represents a tunnel client configuration.
type Tunnel struct {
	// Identifier is the (unique) tunnel identifier. It is static. It cannot be
	// empty.
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Version is the tunnel version. It is static.
	Version Version `protobuf:"varint,2,opt,name=version,proto3,enum=tunneling.Version" json:"version,omitempty"`
	// CreationTime is the creation time of the tunnel. It is static. It cannot
	// be nil.
	CreationTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=creationTime,proto3" json:"creationTime,omitempty"`
	// CreatingVersionMajor is the major version component of the version of
	// Mutagen which created the tunnel. It is static.
	CreatingVersionMajor uint32 `protobuf:"varint,4,opt,name=creatingVersionMajor,proto3" json:"creatingVersionMajor,omitempty"`
	// CreatingVersionMinor is the minor version component of the version of
	// Mutagen which created the tunnel. It is static.
	CreatingVersionMinor uint32 `protobuf:"varint,5,opt,name=creatingVersionMinor,proto3" json:"creatingVersionMinor,omitempty"`
	// CreatingVersionPatch is the patch version component of the version of
	// Mutagen which created the tunnel. It is static.
	CreatingVersionPatch uint32 `protobuf:"varint,6,opt,name=creatingVersionPatch,proto3" json:"creatingVersionPatch,omitempty"`
	// Token is the API access token for the tunnel endpoint. It is static.
	Token string `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	// Secret is the HMAC secret key used for signing and validating offers. It
	// is static.
	Secret []byte `protobuf:"bytes,8,opt,name=secret,proto3" json:"secret,omitempty"`
	// Configuration is the flattened tunnel configuration. It must not be nil.
	// It is static.
	Configuration *Configuration `protobuf:"bytes,9,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// Name is a user-friendly name for the tunnel. It may be empty and but is
	// guaranteed to be unique across all tunnels if non-empty. It is only used
	// as a simpler handle for specifying tunnels. It is static.
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// Labels are the tunnel labels. They are static.
	Labels map[string]string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Paused indicates whether or not the tunnel is marked as paused.
	Paused               bool     `protobuf:"varint,12,opt,name=paused,proto3" json:"paused,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tunnel) Reset()         { *m = Tunnel{} }
func (m *Tunnel) String() string { return proto.CompactTextString(m) }
func (*Tunnel) ProtoMessage()    {}
func (*Tunnel) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf69b8cf0fa91a3, []int{1}
}

func (m *Tunnel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tunnel.Unmarshal(m, b)
}
func (m *Tunnel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tunnel.Marshal(b, m, deterministic)
}
func (m *Tunnel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tunnel.Merge(m, src)
}
func (m *Tunnel) XXX_Size() int {
	return xxx_messageInfo_Tunnel.Size(m)
}
func (m *Tunnel) XXX_DiscardUnknown() {
	xxx_messageInfo_Tunnel.DiscardUnknown(m)
}

var xxx_messageInfo_Tunnel proto.InternalMessageInfo

func (m *Tunnel) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *Tunnel) GetVersion() Version {
	if m != nil {
		return m.Version
	}
	return Version_Invalid
}

func (m *Tunnel) GetCreationTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *Tunnel) GetCreatingVersionMajor() uint32 {
	if m != nil {
		return m.CreatingVersionMajor
	}
	return 0
}

func (m *Tunnel) GetCreatingVersionMinor() uint32 {
	if m != nil {
		return m.CreatingVersionMinor
	}
	return 0
}

func (m *Tunnel) GetCreatingVersionPatch() uint32 {
	if m != nil {
		return m.CreatingVersionPatch
	}
	return 0
}

func (m *Tunnel) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Tunnel) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *Tunnel) GetConfiguration() *Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *Tunnel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tunnel) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Tunnel) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

func init() {
	proto.RegisterType((*TunnelHostCredentials)(nil), "tunneling.TunnelHostCredentials")
	proto.RegisterType((*Tunnel)(nil), "tunneling.Tunnel")
	proto.RegisterMapType((map[string]string)(nil), "tunneling.Tunnel.LabelsEntry")
}

func init() { proto.RegisterFile("tunneling/tunnel.proto", fileDescriptor_0cf69b8cf0fa91a3) }

var fileDescriptor_0cf69b8cf0fa91a3 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x94, 0x41, 0x6b, 0xdb, 0x30,
	0x14, 0xc7, 0x71, 0x93, 0xba, 0xcd, 0x4b, 0x3a, 0x86, 0xe8, 0x3a, 0x11, 0xe8, 0x66, 0x7a, 0x32,
	0x6c, 0x95, 0x21, 0x63, 0xb0, 0xed, 0xd0, 0xc3, 0xca, 0x60, 0x87, 0x0d, 0x86, 0x08, 0x3b, 0xec,
	0xa6, 0xb8, 0x2f, 0xaa, 0x16, 0x5b, 0x0a, 0xb2, 0x5c, 0xe8, 0xa7, 0xda, 0x37, 0xd8, 0x67, 0x1b,
	0x96, 0xec, 0xc4, 0x01, 0x7f, 0x80, 0x1d, 0x7a, 0x7b, 0x4f, 0xbf, 0xff, 0x7b, 0xd2, 0x7b, 0x7f,
	0x63, 0xb8, 0x70, 0xb5, 0xd6, 0x58, 0x28, 0x2d, 0xb3, 0x10, 0xb1, 0xad, 0x35, 0xce, 0x90, 0xc9,
	0xee, 0x7c, 0xfe, 0x5a, 0x1a, 0x23, 0x0b, 0xcc, 0x3c, 0x58, 0xd5, 0xeb, 0xcc, 0xa9, 0x12, 0x2b,
	0x27, 0xca, 0x6d, 0xd0, 0xce, 0x2f, 0xf7, 0x3d, 0x72, 0xa3, 0xd7, 0x4a, 0xd6, 0x56, 0x38, 0x65,
	0x74, 0x8b, 0x5f, 0xee, 0xf1, 0x03, 0xda, 0x6a, 0x07, 0xae, 0xfe, 0x8c, 0xe0, 0xc5, 0xd2, 0xb3,
	0xaf, 0xa6, 0x72, 0xb7, 0x16, 0xef, 0x50, 0x3b, 0x25, 0x8a, 0x8a, 0xbc, 0x02, 0x50, 0x3e, 0x59,
	0x2b, 0xb4, 0x34, 0x4a, 0xa2, 0x74, 0xc2, 0x7b, 0x27, 0xe4, 0x2d, 0x9c, 0xb4, 0xad, 0xe8, 0x51,
	0x12, 0xa5, 0xcf, 0x16, 0x84, 0xed, 0x2e, 0x61, 0x3f, 0x03, 0xe1, 0x9d, 0x84, 0xdc, 0xc0, 0x2c,
	0xb7, 0xe8, 0x9f, 0xb4, 0x54, 0x25, 0xd2, 0x51, 0x12, 0xa5, 0xd3, 0xc5, 0x9c, 0x85, 0xb9, 0x58,
	0x37, 0x17, 0x5b, 0x76, 0x73, 0xf1, 0x03, 0x3d, 0x59, 0xc0, 0x79, 0xc8, 0xb5, 0x6c, 0x7b, 0x7f,
	0x17, 0xbf, 0x8d, 0xa5, 0xe3, 0x24, 0x4a, 0xcf, 0xf8, 0x20, 0x1b, 0xaa, 0x51, 0xda, 0x58, 0x7a,
	0x3c, 0x5c, 0xd3, 0xb0, 0x81, 0x9a, 0x1f, 0xc2, 0xe5, 0xf7, 0x34, 0x1e, 0xac, 0xf1, 0x8c, 0x9c,
	0xc3, 0xb1, 0x33, 0x1b, 0xd4, 0xf4, 0xc4, 0x2f, 0x29, 0x24, 0xe4, 0x02, 0xe2, 0x0a, 0x73, 0x8b,
	0x8e, 0x9e, 0x26, 0x51, 0x3a, 0xe3, 0x6d, 0x46, 0x6e, 0xe0, 0xec, 0xc0, 0x21, 0x3a, 0xf1, 0xab,
	0xa0, 0xbd, 0xed, 0xdd, 0xf6, 0x39, 0x3f, 0x94, 0x5f, 0xfd, 0x1d, 0x43, 0x1c, 0x1c, 0x7b, 0xb2,
	0xe8, 0xff, 0xb4, 0x88, 0x10, 0x18, 0x6b, 0x51, 0x22, 0x05, 0x7f, 0x99, 0x8f, 0xc9, 0x7b, 0x88,
	0x0b, 0xb1, 0xc2, 0xa2, 0xa2, 0xd3, 0x64, 0x94, 0x4e, 0x17, 0x97, 0xbd, 0x66, 0xc1, 0x4e, 0xf6,
	0xcd, 0xf3, 0x2f, 0xda, 0xd9, 0x47, 0xde, 0x8a, 0x9b, 0x27, 0x6e, 0x45, 0x5d, 0xe1, 0x1d, 0x9d,
	0x25, 0x51, 0x7a, 0xca, 0xdb, 0x6c, 0xfe, 0x11, 0xa6, 0x3d, 0x39, 0x79, 0x0e, 0xa3, 0x0d, 0x3e,
	0xb6, 0x9f, 0x40, 0x13, 0x36, 0x13, 0x3f, 0x88, 0xa2, 0x46, 0xef, 0xfc, 0x84, 0x87, 0xe4, 0xd3,
	0xd1, 0x87, 0xe8, 0xf3, 0xf5, 0xaf, 0x37, 0x52, 0xb9, 0xfb, 0x7a, 0xc5, 0x72, 0x53, 0x66, 0x65,
	0xed, 0x84, 0x44, 0x7d, 0xad, 0x4c, 0x17, 0x66, 0xdb, 0x4d, 0xf7, 0x23, 0x52, 0x5a, 0xae, 0x62,
	0x6f, 0xfc, 0xbb, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x85, 0xb9, 0xb4, 0x8c, 0xa6, 0x04, 0x00,
	0x00,
}
